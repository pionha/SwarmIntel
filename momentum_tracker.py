import os
import time
from argparse import ArgumentParser
from collections import deque

from dotenv import load_dotenv
from tqdm import tqdm
from web3 import Web3

# --- –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ ---
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def get_eth_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Ethereum –Ω–æ–¥–æ–π —á–µ—Ä–µ–∑ Infura."""
    load_dotenv()
    infura_project_id = os.getenv("INFURA_PROJECT_ID")
    if not infura_project_id or infura_project_id == "YOUR_INFURA_PROJECT_ID_HERE":
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞: INFURA_PROJECT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω.{Colors.ENDC}")
        print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª {Colors.BOLD}.env{Colors.ENDC} –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à –∫–ª—é—á.")
        print("–ü—Ä–∏–º–µ—Ä: INFURA_PROJECT_ID=\"abcdef1234567890\"")
        return None
    
    w3 = Web3(Web3.HTTPProvider(f'https://mainnet.infura.io/v3/{infura_project_id}'))
    
    if not w3.is_connected():
        print(f"{Colors.FAIL}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ethereum Mainnet.{Colors.ENDC}")
        return None
        
    print(f"{Colors.GREEN}–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Ethereum Mainnet.{Colors.ENDC}")
    return w3

def track_momentum(w3, contract_address, num_blocks):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–º–µ–Ω—Ç—É–º —Ä–æ—Å—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤–æ–∫—Ä—É–≥ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.
    –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ - —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.
    """
    try:
        target_address = w3.to_checksum_address(contract_address)
    except ValueError:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.{Colors.ENDC}")
        return

    latest_block_number = w3.eth.block_number
    start_block = latest_block_number - num_blocks + 1

    print(f"\n{Colors.HEADER}{Colors.BOLD}üêù –ó–∞–ø—É—Å–∫ SwarmIntel... –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–µ.{Colors.ENDC}")
    print(f"üéØ {Colors.CYAN}–¶–µ–ª–µ–≤–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç:{Colors.ENDC} {target_address}")
    print(f" SCANNING_DEPTH  SCANNING_DEPTH_IN_BLOCKS{Colors.CYAN}–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:{Colors.ENDC} {num_blocks} –±–ª–æ–∫–æ–≤ (—Å {start_block} –ø–æ {latest_block_number})")
    
    period_unique_interactors = set()
    period_transactions = 0

    pbar = tqdm(range(start_block, latest_block_number + 1), 
                desc=f"{Colors.BLUE}–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤{Colors.ENDC}",
                ncols=100)

    for block_num in pbar:
        try:
            block = w3.eth.get_block(block_num, full_transactions=True)
            for tx in block.transactions:
                if tx['to'] and w3.to_checksum_address(tx['to']) == target_address:
                    period_transactions += 1
                    from_address = w3.to_checksum_address(tx['from'])
                    period_unique_interactors.add(from_address)
        except Exception as e:
            tqdm.write(f"{Colors.WARNING}–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫ {block_num}: {e}{Colors.ENDC}")
            continue

    # --- –í–´–ß–ò–°–õ–ï–ù–ò–ï –ú–ï–¢–†–ò–ö ---
    total_unique_wallets = len(period_unique_interactors)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ –¥–æ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –º—ã –Ω–µ –∑–Ω–∞–ª–∏ –Ω–∏ –æ–± –æ–¥–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ.
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö "—Å—Ç–∞—Ä—ã—Ö" –∫–æ—à–µ–ª—å–∫–æ–≤.
    known_wallets_before_period = set() 
    new_wallets = period_unique_interactors - known_wallets_before_period
    
    # –ù–∞—à–∞ –∫–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞!
    growth_momentum_index = (len(new_wallets) / total_unique_wallets) * 100 if total_unique_wallets > 0 else 0

    # --- –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ---
    print(f"\n{Colors.HEADER}{Colors.BOLD}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–æ–º–µ–Ω—Ç—É–º–∞:{Colors.ENDC}")
    print("-" * 55)
    print(f"–û–±—â–µ–µ —á–∏—Å–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {Colors.BOLD}{Colors.GREEN}{period_transactions}{Colors.ENDC}")
    print(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ—è (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤): {Colors.BOLD}{Colors.GREEN}{total_unique_wallets}{Colors.ENDC}")
    
    print(f"\n{Colors.HEADER}{Colors.UNDERLINE}–ö–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ SwarmIntel:{Colors.ENDC}")
    print(f"üìà {Colors.WARNING}–ò–Ω–¥–µ–∫—Å –ú–æ–º–µ–Ω—Ç—É–º–∞ –†–æ—Å—Ç–∞ (Growth Momentum Index):{Colors.ENDC} "
          f"{Colors.BOLD}{growth_momentum_index:.2f}%{Colors.ENDC}")
    print(f"   {Colors.WARNING}(–î–æ–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–æ—è){Colors.ENDC}")
    print("-" * 55)
    
    if growth_momentum_index > 80:
         print(f"{Colors.GREEN}–í–´–í–û–î: –ì–∏–ø–µ—Ä-—Ä–æ—Å—Ç! –ü—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∑—Ä—ã–≤–Ω–æ–π —Ä–æ—Å—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (—ç—Ñ—Ñ–µ–∫—Ç —Ä–æ—è).{Colors.ENDC}")
    elif growth_momentum_index > 50:
        print(f"{Colors.CYAN}–í–´–í–û–î: –°–∏–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º. –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.{Colors.ENDC}")
    else:
        print(f"{Colors.BLUE}–í–´–í–û–î: –£–º–µ—Ä–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —è–¥—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.{Colors.ENDC}")


if __name__ == "__main__":
    parser = ArgumentParser(description="SwarmIntel - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–æ–º–µ–Ω—Ç—É–º —Ä–æ—Å—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤–æ–∫—Ä—É–≥ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.")
    parser.add_argument("contract", help="–ê–¥—Ä–µ—Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    parser.add_argument("-b", "--blocks", type=int, default=1000, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000).")
    
    args = parser.parse_args()
    
    web3_connection = get_eth_connection()
    if web3_connection:
        track_momentum(web3_connection, args.contract, args.blocks)
